name: Run integration tests v2

on:
  workflow_dispatch:
    inputs:
      database:
        description: 'Database override'
        required: false
        default: ''
      engine:
        description: 'Engine override'
        required: false
      account:
        description: 'Account override'
        required: false
        type: string
      java_version:
        description: 'JRE version'
        required: false
        type: string
        default: '11'
      os_name:
        description: 'The operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
      sendSlackNotifications:
        description: 'Send Slack notifications on failure'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      database:
        description: 'Database override'
        required: false
        default: ''
        type: string
      engine:
        description: 'Engine override'
        required: false
        type: string
      account:
        description: 'Account override'
        required: false
        type: string
      java_version:
        description: 'Java'
        required: false
        type: string
        default: '11'
      os_name:
        description: 'Operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
      sendSlackNotifications:
        description: 'Send Slack notifications on failure'
        required: false
        type: boolean
        default: false
    secrets:
      FIREBOLT_CLIENT_ID_STG_NEW_IDN:
        required: true
      FIREBOLT_CLIENT_SECRET_STG_NEW_IDN:
        required: true
      SLACK_BOT_TOKEN:
        required: false

jobs:
  run-integration-tests:
    runs-on: ${{ inputs.os_name }}
    steps:
      - name: Validate database and engine
        if: ${{ (inputs.database == '') != (inputs.engine == '') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed("Database and Engine parameters should be provided simultaneously")

      - name: Resolve account
        id: set-account
        shell: bash  # use bash across all OSs
        run: |
          if ! [[ -z "${{ inputs.account }}" ]]; then
            echo "account=${{ inputs.account }}" >> $GITHUB_OUTPUT
            echo "account=${{ inputs.account }}"
          else
            echo "account=${{ vars.FIREBOLT_ACCOUNT }}" >> $GITHUB_OUTPUT
            echo "account=${{ vars.FIREBOLT_ACCOUNT }}"
          fi

      - name: Check out code
        uses: actions/checkout@v3

      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.java_version }}

      # for ubuntu-latest , java 11 it will create u11. For windows-latest java 17 it will create w17
      - name: Reduce db suffix name
        id: dbsuffix
        shell: bash
        run: |
          OS_PREFIX=$(echo "${{ inputs.os_name }}" | cut -c1)
          DB_SUFFIX="${OS_PREFIX}${{ inputs.java_version }}"
          echo "DB_SUFFIX=$DB_SUFFIX"
          echo "db_suffix=$DB_SUFFIX" >> $GITHUB_OUTPUT

      - name: Inspect Python on runner (system + venv)
        shell: bash
        run: |
          set -euxo pipefail
          echo "Runner OS: $RUNNER_OS"
          
          echo "--- System Python(s) ---"
          command -v python || true
          command -v python3 || true
          which -a python3 || true
          python3 --version
          python3 -c 'import sys,platform; print("sys.version:", sys.version); print("sys.executable:", sys.executable); print("platform:", platform.platform())'
          
          echo "--- Fresh venv Python ---"
          python3 -m venv .venv
          source .venv/bin/activate
          python -VV
          python -c 'import sys; print("venv sys.executable:", sys.executable)'
          
          echo "--- Probe: typing.Union mutability ---"
          python - <<'PY'
          import typing
          try:
              setattr(typing.Union, "__module__", "probe")
              print("typing.Union setattr: OK (pre-3.14 behavior)")
          except Exception as e:
              print("typing.Union setattr: FAILED ->", repr(e), "(seen on 3.14)")
          PY
          
          echo "--- httpx/httpcore versions (if installed) ---"
          python - <<'PY'
          try:
              import httpx, httpcore
              print("httpx:", httpx.__version__, "httpcore:", httpcore.__version__)
          except Exception as e:
              print("Import check skipped/failed:", repr(e))
          PY

      - name: Setup database and engine
        id: setup
        if: ${{ inputs.database == '' }}
        uses: firebolt-db/integration-testing-setup@v2
        with:
          firebolt-client-id: ${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}
          firebolt-client-secret: ${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN }}
          account: ${{ steps.set-account.outputs.account }}
          api-endpoint: "api.staging.firebolt.io"
          db_suffix: ${{ steps.dbsuffix.outputs.db_suffix }}

      - name: Determine database name
        id: find-database-name
        shell: bash  # use bash across all OSs
        run: |
          if ! [[ -z "${{ inputs.database }}" ]]; then
             echo "database_name=${{ inputs.database }}" >> $GITHUB_OUTPUT
          else
             echo "database_name=${{ steps.setup.outputs.database_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine engine name
        id: find-engine-name
        shell: bash  # use bash across all OSs
        run: |
          if ! [[ -z "${{ inputs.engine }}" ]]; then
             echo "engine_name=${{ inputs.engine }}" >> $GITHUB_OUTPUT
          else
             echo "engine_name=${{ steps.setup.outputs.engine_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Grant execute permission (Unix)
        if: runner.os != 'Windows'
        run: chmod +x gradlew

#      - name: Run integration tests
#        run: ./gradlew integrationTest -Ddb="${{ steps.find-database-name.outputs.database_name }}" -Denv="staging" -Dclient_secret="${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN }}" -Dclient_id="${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}" -Daccount="${{ steps.set-account.outputs.account }}" -Dengine="${{ steps.find-engine-name.outputs.engine_name }}" -DincludeTags="v2" -Dv2GenerateSeriesMaxSize="${{ vars.V2_GENERATE_SERIES_MAX_SIZE }}" -DintegrationTestMaxHeap=3g
#
#      - name: Upload integration test reports
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: integrationTest-reports-${{ inputs.os_name }}-java${{ inputs.java_version }}
#          path: |
#            build/reports/tests/integrationTest
#            build/test-results/integrationTest
#            build/reports/problems
#            build/reports/tests/test
#            build/test-results/test
#          if-no-files-found: warn
#          retention-days: 4

      # Collect logs into workspace (Linux/macOS)
      - name: Collect Gradle logs (unix)
        if: always() && runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p build/ci-logs/gradle
          cp ~/.gradle/daemon/*/*.log build/ci-logs/gradle 2>/dev/null || true
          find . -type f \( -name 'hs_err_pid*.log' -o -name 'replay_pid*.log' \) -exec cp {} build/ci-logs \; 2>/dev/null || true

      # Collect logs into workspace (Windows)
      - name: Collect Gradle logs (windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build\ci-logs\gradle | Out-Null
          Get-ChildItem -Path $env:USERPROFILE\.gradle\daemon\*\*.log -ErrorAction SilentlyContinue | Copy-Item -Destination build\ci-logs\gradle -ErrorAction SilentlyContinue
          Get-ChildItem -Path . -Recurse -Include hs_err_pid*.log,replay_pid*.log -ErrorAction SilentlyContinue | Copy-Item -Destination build\ci-logs -ErrorAction SilentlyContinue

#      - name: Allure Report
#        uses: firebolt-db/action-allure-report@v1
#        if: always() && runner.os == 'Linux' # Needed in order to report failed tests
#        continue-on-error: true # FIR-48984
#        with:
#            github-key: ${{ secrets.GITHUB_TOKEN }}
#            test-type: integration_v2
#            allure-dir: build/allure-results
#            pages-branch: gh-pages
#            keep-files: true

      - name: Slack Notify of failure
        if: failure() && inputs.sendSlackNotifications
        uses: firebolt-db/action-slack-nightly-notify@v1
        with:
          os: ${{ inputs.os_name }}
          programming-language: Java
          language-version: ${{ inputs.java_version }}
          notifications-channel: 'ecosystem-ci-notifications'
          slack-api-key: ${{ secrets.SLACK_BOT_TOKEN }}
