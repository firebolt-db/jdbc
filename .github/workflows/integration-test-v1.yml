name: Run integration tests v1

on:
  workflow_dispatch:
    inputs:
      database:
        description: 'Database override'
        required: false
        default: ''
      engine:
        description: 'Engine override'
        required: false
      java_version:
        description: 'JRE version'
        required: false
        type: string
        default: '11'
      os_name:
        description: 'The operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
      sendSlackNotifications:
        description: 'Send Slack notifications on failure'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      database:
        description: 'Database override'
        required: false
        default: ''
        type: string
      engine:
        description: 'Engine override'
        required: false
        type: string
      java_version:
        description: 'JRE version'
        required: false
        type: string
        default: '11'
      os_name:
        description: 'The operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
      sendSlackNotifications:
        description: 'Send Slack notifications on failure'
        required: false
        type: boolean
        default: false
    secrets:
      FIREBOLT_STG_USERNAME:
        required: true
      FIREBOLT_STG_PASSWORD:
        required: true
      SLACK_BOT_TOKEN:
        required: false

jobs:
  run-integration-tests:
    runs-on: ${{ inputs.os_name }}

    steps:
      - name: Validate database and engine
        if: ${{ (inputs.database == '') != (inputs.engine == '') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed("Database and Engine parameters should be provided simultaneously")

      - name: Check out code
        uses: actions/checkout@v3

      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.java_version }}

      # for ubuntu-latest , java 11 it will create u11. For windows-latest java 17 it will create w17
      - name: Reduce db suffix name
        id: dbsuffix
        shell: bash
        run: |
          OS_PREFIX=$(echo "${{ inputs.os_name }}" | cut -c1)
          DB_SUFFIX="${OS_PREFIX}${{ inputs.java_version }}"
          echo "DB_SUFFIX=$DB_SUFFIX"
          echo "db_suffix=$DB_SUFFIX" >> $GITHUB_OUTPUT

      - name: Setup database and engine
        id: setup
        if: ${{ inputs.database == '' }}
        uses: firebolt-db/integration-testing-setup@v1
        with:
          firebolt-username: ${{ secrets.FIREBOLT_STG_USERNAME }}
          firebolt-password: ${{ secrets.FIREBOLT_STG_PASSWORD }}
          api-endpoint: "api.staging.firebolt.io"
          region: "us-east-1"
          instance-type: "B2"
          db_suffix: ${{ steps.dbsuffix.outputs.db_suffix }}

      - name: Determine database name
        id: find-database-name
        shell: bash  # use bash across all OSs
        run: |
          if ! [[ -z "${{ inputs.database }}" ]]; then
             echo "database_name=${{ inputs.database }}" >> $GITHUB_OUTPUT
          else
             echo "database_name=${{ steps.setup.outputs.database_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine engine name
        id: find-engine-name
        shell: bash  # use bash across all OSs
        run: |
          if ! [[ -z "${{ inputs.engine }}" ]]; then
             echo "engine_name=${{ inputs.engine }}" >> $GITHUB_OUTPUT
          else
             echo "engine_name=${{ steps.setup.outputs.engine_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Grant execute permission (Unix)
        if: runner.os != 'Windows'
        run: chmod +x gradlew

      - name: Run integration tests
        run: ./gradlew integrationTest -Ddb="${{ steps.find-database-name.outputs.database_name }}" -Dapi="api.staging.firebolt.io" -Dpassword="${{ secrets.FIREBOLT_STG_PASSWORD }}" -Duser="${{ secrets.FIREBOLT_STG_USERNAME }}" -Dengine="${{ steps.find-engine-name.outputs.engine_name }}" -DincludeTags="v1" -Dv1GenerateSeriesMaxSize="${{ vars.V1_GENERATE_SERIES_MAX_SIZE }}"

      - name: Slack Notify of failure
        if: failure() && inputs.sendSlackNotifications
        uses: firebolt-db/action-slack-nightly-notify@v1
        with:
          os: ${{ inputs.os_name }}
          programming-language: Java
          language-version: ${{ inputs.java_version }}
          notifications-channel: 'ecosystem-ci-notifications'
          slack-api-key: ${{ secrets.SLACK_BOT_TOKEN }}
