import java.util.jar.JarFile

plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730"
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'com.firebolt'
version = '2.2.5-SNAPSHOT'

repositories {
    mavenCentral()
}

project.ext {
    codeCoverageExclusionList = [
            "**/firebolt/jdbc/client/config/**"
    ]
}

java {
    withSourcesJar()
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompileOnly.extendsFrom compileOnly
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

// Generate file containing project version
def generatedVersionDir = "${buildDir}/resources"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }

    testCommon {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

}
dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'net.jodah:expiringmap:0.5.10'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.lz4:lz4-java:1.8.0'
    implementation'dev.failsafe:failsafe:3.3.0'
    implementation'dev.failsafe:failsafe-okhttp:3.3.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation fileTree(dir: 'libs', includes: ['*.jar'])
    compileOnly 'org.slf4j:slf4j-api:2.0.6'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'ch.qos.logback:logback-classic:1.3.5'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.10.0'
    testImplementation 'org.mockito:mockito-core:4.10.0'
    testImplementation 'org.mockito:mockito-inline:4.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:1.9.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
    testImplementation 'com.squareup.okhttp3:okhttp-tls:4.10.0'
    testCompileOnly 'org.slf4j:slf4j-api:2.0.6'
    testCommonImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation sourceSets.testCommon.output
    compileTestJava.dependsOn processTestResources
    jar.dependsOn processTestResources
    compileTestCommonJava.dependsOn processTestResources
    compileTestCommonJava.dependsOn processIntegrationTestResources
    compileIntegrationTestJava.dependsOn processIntegrationTestResources
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    useJUnitPlatform()
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    maxParallelForks = (int) (Runtime.runtime.availableProcessors() / 2 + 1)
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: project.codeCoverageExclusionList)
        }))
    }
    reports {
        xml.required = true
    }
}

shadowJar {
    // rename the shadow jar to the original jar by omitting the classifier
    archiveClassifier.set('')
    // move all packages except org.slf4j for now
    def packages = [] as Set<String>
    configurations.each { configuration ->
        configuration.files.each { jar ->
            JarFile jf = new JarFile(jar)
            jf.entries().each { entry ->
                if (entry.name.endsWith(".class") && entry.name != "module-info.class" &&
                   !entry.name.startsWith('org/slf4j') && !entry.name.startsWith('ch/qos/logback')) {
                    packages << entry.name[0..entry.name.lastIndexOf('/')-1].replaceAll('/', '.')
                }
            }
            jf.close()
        }
    }
    packages.each {
        relocate(it, "com.firebolt.shadow.${it}")
    }
    exclude("test/**")
    exclude("integrationTest/**")
}

tasks.assemble.dependsOn shadowJar

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties

task printVersion {
    println project.version
}
sonarqube {
    properties {
        property "sonar.projectKey", "firebolt-db_jdbc"
        property "sonar.organization", "firebolt-db"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.exclusions', project.codeCoverageExclusionList
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            // remove dependencies due to shaded jar
            pom.withXml {
              node = asNode()
              node.remove(node.get('dependencies'))
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://repo.repsy.io/mvn/firebolt/maven'
            def snapshotsRepoUrl = 'https://repo.repsy.io/mvn/firebolt/maven-snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("REPSY_USERNAME")
                password System.getenv("REPSY_PASSWORD")
            }
        }
    }
}

task generateJavadoc(type: Javadoc) {
    failOnError false
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    classpath = classpath + sourceSets.main.compileClasspath
    options {
        links = ['https://docs.oracle.com/javase/8/docs/api/']
    }
    options.addStringOption('Xdoclint:none', '-quiet')
    if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.addBooleanOption("html5", true)
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
