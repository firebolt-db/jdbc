import java.util.jar.JarFile

plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "6.3.1.5724"
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.0.0'
    id 'signing'
    id 'io.qameta.allure' version '3.0.0'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group 'io.firebolt'

repositories {
    mavenCentral()
}

project.ext {
    codeCoverageExclusionList = [
            "**/firebolt/jdbc/client/config/**"
    ]
    junitJupiterVersion = '5.13.4'
    lombokVersion = '1.18.42'
    okHttpVersion = '4.12.0'
    slf4jVersion = '2.0.17'
}

java {
    withSourcesJar()
    withJavadocJar()
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompileOnly.extendsFrom compileOnly
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

// Generate file containing project version
def generatedVersionDir = "${buildDir}/resources"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }

    testCommon {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

}
dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.json:json:20250517'
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    implementation 'net.jodah:expiringmap:0.5.11'
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'org.lz4:lz4-java:1.8.0'
    implementation 'commons-validator:commons-validator:1.10.0'

    implementation fileTree(dir: 'libs', includes: ['*.jar'])

    compileOnly "org.slf4j:slf4j-api:${slf4jVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'ch.qos.logback:logback-classic:1.5.18'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0'
    testImplementation 'org.hamcrest:hamcrest-library:3.0'
    testImplementation "com.squareup.okhttp3:mockwebserver:${okHttpVersion}"
    testImplementation "com.squareup.okhttp3:okhttp-tls:${okHttpVersion}"
    testImplementation 'io.zonky.test:embedded-postgres:2.1.1'
    testCompileOnly "org.slf4j:slf4j-api:${slf4jVersion}"
    testCommonImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testCommonImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation sourceSets.testCommon.output
    compileTestJava.dependsOn processTestResources
    jar.dependsOn processTestResources
    jar.dependsOn processIntegrationTestResources
    javadoc.dependsOn processTestResources
    javadoc.dependsOn processIntegrationTestResources
    compileTestCommonJava.dependsOn processTestResources
    compileTestCommonJava.dependsOn processIntegrationTestResources
    compileIntegrationTestJava.dependsOn processIntegrationTestResources
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    testImplementation 'io.qameta.allure:allure-junit5:2.29.1'
}

test {
    jvmArgs(
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED"
    ) // so we can change the environment variables
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        exceptionFormat = 'full'
        showStackTraces = true
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    useJUnitPlatform() {
        includeTags(System.getProperty("includeTags", "v2").split(","))
        excludeTags(System.getProperty("excludeTags", "nothing").split(","))
    }
    // Increase heap to avoid OOM when building very large merged SQL batches in tests
    maxHeapSize = System.getProperty("integrationTestMaxHeap", "2g")
    // Helpful JVM flags and opens for tests
    jvmArgs(
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "-XX:+HeapDumpOnOutOfMemoryError",
        "-XX:HeapDumpPath=${buildDir}/heapdumps"
    )
    reports {
        junitXml {
            outputPerTestCase = true // defaults to false
            mergeReruns = true // defaults to false
        }
    }
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    // Temporarily disabled multithreaded execution due to bug on server side.
    //maxParallelForks = (int) (Runtime.runtime.availableProcessors() / 2 + 1)

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }

    // print a summary of the results
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "\nTest result: ${result.resultType}"
            println "Tests run: ${result.testCount}, Passed: ${result.successfulTestCount}, Failed: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}"
        }
    }

    // Ensure heap dump directory exists if OOM happens
    doFirst {
        file("${buildDir}/heapdumps").mkdirs()
        println "integrationTest JVM maxHeapSize=${maxHeapSize}"
    }
}

allprojects {
    // add a collection to track failedTests
    ext.failedTests = []

    // add a testlistener to all tasks of type Test
    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if(result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE){
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if(!failedTests.empty){
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println "End of the list"
        } else {
            println "No failures found"
        }
    }
}

jacoco {
    toolVersion = "0.8.10"
}


jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: project.codeCoverageExclusionList)
        }))
    }
    reports {
        xml.required = true
    }
}

shadowJar {
    // rename the shadow jar to the original jar by omitting the classifier
    archiveClassifier.set('')
    // move all packages except org.slf4j for now
    def packages = [] as Set<String>
    configurations.each { configuration ->
        configuration.files.each { jar ->
            JarFile jf = new JarFile(jar)
            jf.entries().each { entry ->
                if (entry.name.endsWith(".class") && entry.name != "module-info.class" &&
                    !entry.name.startsWith('org/slf4j') && !entry.name.startsWith('ch/qos/logback')) {
                    packages << entry.name[0..entry.name.lastIndexOf('/')-1].replaceAll('/', '.')
                }
            }
            jf.close()
        }
    }
    packages.each {
        relocate(it, "com.firebolt.shadow.${it}")
    }
    exclude("test/**")
    exclude("integrationTest/**")
}

tasks.assemble.dependsOn shadowJar

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties

task printVersion {
    println "PROJECT_VERSION=${project.version}"
}
sonarqube {
    properties {
        property "sonar.java.source", "11"
        property "sonar.projectKey", "firebolt-db_jdbc"
        property "sonar.organization", "firebolt-db"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.exclusions', project.codeCoverageExclusionList
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = "firebolt-jdbc"
                description = 'Type 4 JDBC driver that allows connection to Firebolt Database'
                url = "https://github.com/firebolt-db/jdbc"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "JonyBoyko"
                        name = "Ivan Boyko"
                        email = "107884978+yingli017@users.noreply.github.com"
                    }
                    developer {
                        id = "ptiurin"
                        name = "Petro Tiurin"
                        email = "petro.tiurin@firebolt.io"
                    }
                    developer {
                        id = "kevin"
                        name = "Kevin Marr"
                        email = "kevin@firebolt.io"
                    }
                    developer {
                        id = "aymeric"
                        name = "Aymeric Dispa"
                        email = "aymeric@firebolt.io"
                    }
                    developer {
                        id = "alexradzin"
                        name = "Alexander Radzin"
                        email = "alexander.radzin@firebolt.io"
                    }
                    developer {
                        id = "reelsen"
                        name = "Alexander Reelsen"
                        email = "alexander@reelsen.net"
                    }
                }
                scm {
                    connection = "scm:svn:https://github.com/firebolt-db/jdbc/"
                    developerConnection = "scm:svn:https://github.com/firebolt-db/jdbc/"
                    url = "https://github.com/firebolt-db/jdbc/"
                }
            }
            // remove dependencies due to shaded jar
            pom.withXml {
                node = asNode()
                node.remove(node.get('dependencies'))
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/'

            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("MAVEN_REPO_USERNAME")
                password System.getenv("MAVEN_REPO_PASSWORD")
            }
        }
    }
}

// Automate close and release of Sonatype staging repository
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username.set(System.getenv('MAVEN_REPO_USERNAME'))
            password.set(System.getenv('MAVEN_REPO_PASSWORD'))
        }
    }
}

// https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#ensuring-deployment-visibility-in-the-central-publisher-portal
task manualUploadToMavenCentral {
    doLast {
        def mavenUsername = System.getenv("MAVEN_REPO_USERNAME")
        def mavenPassword = System.getenv("MAVEN_REPO_PASSWORD")
        if (!mavenUsername || !mavenPassword) {
            throw new GradleException("Missing Maven credentials")
        }

        def credentials = "${mavenUsername}:${mavenPassword}".bytes.encodeBase64().toString()

        def mavenHost = "https://ossrh-staging-api.central.sonatype.com"
        def namespace = "io.firebolt"
        def apiUrl = "${mavenHost}/manual/upload/defaultRepository/${namespace}"

        println "Calling API: $apiUrl"

        def process = ["curl", "-X", "POST", apiUrl,
                       "-H", "Authorization: Bearer ${credentials}",
                       "-H", "Content-Type: application/json",
                       "-d", "{}",
                       "--fail-with-body"].execute()

        def output = new StringBuffer()
        def error = new StringBuffer()
        process.waitForProcessOutput(output, error)

        if (process.exitValue() != 0) {
            throw new GradleException("API call failed: $output")
        }

        println "API call succeeded: $output"
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Firebolt JDBC driver', // This value must be equal to one defined in VersionUtil
                'Implementation-Vendor': 'Firebolt Analytics',
                'Implementation-Version': version,
                'Specification-Title': 'JDBC',
                'Specification-Version': jdbcVersion,
                'Specification-Vendor': 'Oracle Corporation',
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

allure {
    version = '2.25.0'
    autoconfigure = true
    useJUnit5 {
        version = '2.25.0'
    }
}

task generateJavadoc(type: Javadoc) {
    failOnError false
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    classpath = classpath + sourceSets.main.compileClasspath
    options {
        links = ['https://docs.oracle.com/javase/8/docs/api/']
    }
    options.addStringOption('Xdoclint:none', '-quiet')
}

signing {
    def signingKey = System.getenv("GRADLE_SIGNING_KEY")
    def signingPassword = System.getenv("GRADLE_SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
